Quy tắc đối với track Container Shipping Route Coordination (TIKI)
Các đội lập trình để giải quyết một bài toán NP-hard theo hình thức lập trình thi đấu và nộp code trực tiếp lên hệ thống để tự động chấm điểm.

Bài toán: Điều phối lộ trình vận chuyển container

Ngữ cảnh bài toán

Đầu kéo, rơ mooc và container rỗng nằm rải rác ở các bãi (DEPOT) khác nhau. Đầu kéo (TRUCK) cần được lập lộ trình xuất phát từ bãi đỗ, vận chuyển container và kết thúc hành trình tại bãi đỗ. Một TRUCK có thể chở được tối đa 02 container loại 20ft và 01 container loại 40ft. Để vận chuyển container, đầu kéo bắt buộc phải đi lấy rơ mooc (TRAILER) trước và sau khi dùng xong đem trả rơ mooc về bãi. Trong một số trường hợp, TRUCK tới điểm hạ container có thể tháo cả rơ mooc kèm container (do thiếu xe nâng) và đi lấy rơ mooc khác để phục vụ yêu cầu khác.

Có 04 loại yêu cầu vận chuyển container:

INBOUND_FULL (IF): chở 1 container đầy từ cảng (PORT) về kho khách hàng (WAREHOUSE) để dỡ hàng nhập khẩu.
INBOUND_EMPTY (IE): chở 1 container rỗng từ WAREHOUSE hoặc PORT về DEPOT để lưu kho.
OUTBOUND_EMPTY (OE): chở 1 container rỗng từ DEPOT tới WAREHOUSE hoặc PORT để bốc hàng xuất khẩu
OUTBOUND_FULL (OF): chở 1 container đầy từ WAREHOUSE tới PORT để xuất khẩu.
Các dữ liệu đầu vào:

Mỗi yêu cầu vận chuyển container gồm các thông tin sau: điểm lấy/trả, loại container (20ft hoặc 40ft), thời gian để lấy/trả container.
Thời gian di chuyển từ 1 địa điểm đến 1 địa điểm khác là biết trước. Thời gian tác nghiệp việc lấy và gắn rơ mooc và đầu kéo và thời gian tháo rơ mooc khỏi đầu kéo cũng được biết trước.
Mục tiêu của bài toán Cần lập kế hoạch cho các đầu kéo đi lấy rơ-mooc rồi vận chuyển các container theo yêu cầu của khách hàng với mục tiêu hoàn thành công việc (phục vụ hết tất cả các yêu cầu vận chuyển) sớm nhất. Các đầu kéo xuất phát từ bãi của mình, đi lấy rơ mooc ở 1 bãi duy nhất, phục vụ các yêu cầu vận chuyển container và quay về bãi của mình. Thời điểm hoàn thành công việc của mỗi đầu kéo được tính là thời điểm đầu kéo đã phục vụ xong hết các nhiệm vụ vận chuyển được giao và quay trở lại bãi nơi đầu kéo này xuất phát. Mục tiêu của bài toán bao gồm 2 thành phần (cần được tối thiểu hóa):

F1: Thời điểm hoàn thành tất cả yêu cầu vận chuyển là thời điểm hoàn thành công việc muộn nhất trong số thời điểm hoàn thành của các đầu kéo được giao thực hiện công việc. 
F2: Tổng thời gian di chuyển (không tính thời gian phục vụ tháo lắp container, rơ mooc tại các địa điểm) của các đầu kéo.
Hai thành phần F1 và F2 (trong đó F1 được ưu tiên hơn F2) được tổng hợp thành 1 hàm duy nhất F = 𝞪*F1 + F2 (𝞪 là một hằng số lớn)

Tiêu chí đánh giá. BTC sẽ cung cấp các bộ dữ liệu test (testcase). Với mỗi testcase, các đội sẽ được tính điểm số (score) tùy thuộc vào giá trị của hàm F (hàm F càng nhỏ thì score càng lớn). Điểm số của mỗi đội sẽ được xác định bằng tổng điểm số của đội đó ứng với các testcase.

Ví dụ có 3 đầu kéo 1, 2, 3 được vận hành để phục vụ các yêu cầu vận chuyển. Thời điểm các đầu kéo 1, 2, 3 hoàn thành công việc và quay về bãi tương ứng là 10000, 12000, 8000. Thời gian di chuyển của đầu kéo 1, 2, 3 tương ứng là 9000, 10000, 6000. Khi đó:

F1 = max(10000, 12000, 8000) = 12000
F2 = 9000 + 10000 + 6000 = 25000
F = 𝞪* 12000 + 25000
Score (điểm) của một phương án được định nghĩa bằng 1000000000 – F (score càng lớn thì phương án tìm được càng tốt).

Input

Dòng 1: chứa Points N: trong đó N là số lượng điểm (các địa điểm đánh số từ 1, 2, . . ., N)
Dòng 2: DISTANCES N^2:
N2 dòng tiếp theo, mỗi dòng ghi 3 số nguyên: i  j  d trong đó d là thời gian di chuyển từ địa điểm i đến địa điểm j (1 <= i, j <= N) 
Dòng tiếp theo ghi: TRAILER p d trong đó p là địa điểm nơi chứa rơ mooc (1 <= p <= N) và d là thời gian cần để gắn rơ-mooc vào đầu kéo
Dòng tiếp theo ghi: TRUCK m, trong đó m là số đầu kéo
M dòng tiếp theo, mỗi dòng ghi: 2 số nguyên dương i và p trong đó <id> là định danh của đầu kéo (<id> = 1, 2, …, m) và p là địa điểm nơi đầu kéo <id> đang đỗ
Khối tiếp theo là khối thông tin yêu cầu vận chuyển, khối bao gồm các dòng, mỗi dòng là thông tin của 1 yêu cầu vận chuyển với định dạng:
REQ <id> <size> <p1> <pickup_action> <pickup_duration>  <p2> <drop_action>  <drop_duration>

trong đó <id> là định danh của yêu cầu vận chuyển (đánh số 1, 2, … )

<size> là kích thước container với 2 giá trị là 20 và 40
<p1>: địa điểm lấy container
<pickup_action>: là string mô tả hành động lấy container với 2 giá trị
PICKUP_CONTAINER: chỉ lấy container
PICKUP_CONTAINER_TRAILER: container đã nằm sẵn trên rơ-mooc rồi, chỉ cần đầu kéo đến vào kéo rơ-mooc chứa container đi thôi
<pickup_duration>: thời gian diễn ra hoạt động lấy container hoặc gắn rơ-mooc
<p2>: địa điểm trả container
<drop_action>: string mô tả hành động trả container với 2 giá trị:
DROP_CONTAINER: chỉ hạ container xuống, còn rơ-mooc thì vẫn gắn vào đầu kéo, đầu kéo kéo theo rơ-mooc có thể đi phục vụ yêu cầu vận chuyển khác
DROP_CONTAINER_TRAILER: tháo rơ-mooc khỏi đầu kéo (địa điểm nhận container không có thiết bị hạ container, nên phải tháo và để lại rơ-mooc, container vẫn nằm trên rơ-mooc để bốc dỡ hoặc nạp hàng)
<drop_duration>: khoảng thời gian diễn ra hoạt động trả container
Khối thông tin yêu cầu vận chuyển được kết thúc bới #

Output

Dòng đầu tiên ghi ROUTES m, trong đó m là số lượng đầu kéo được phân lộ trình thực hiện phục vụ yêu cầu vận chuyển

Tiếp theo là m khối, mỗi khối chứa thông tin về lộ trình bao gồm chuỗi các địa điểm và hành động tương ứng, mỗi địa điểm và hành động tại địa điểm đó với định dạng:

<point_id> <action> <request_id> 

trong đó

<point_id> là số thứ tự địa điểm (từ 1 đến N),
<action> là trong mô tả hành động tại địa điểm đó bao gồm các giá trị:
PICKUP_CONTAINER_TRAILER: găn rơ-mooc có container nằm trên vào đầu kéo
PICKUP_CONTAINER: nhận container (điều kiện đầu kéo đã có sẵn rơ-mooc rồi)
DROP_CONTAINER: hạ container (rơ-mooc vẫn gắn vào đầu kéo)
DROP_CONTAINER_TRAILER: tháo rơ-mooc kèm container ra khỏi đầu kéo
STOP: dừng tại bãi đậu tương ứng của đầu kéo. Với <action> là STOP thì sau đó sẽ không có <request_id>
<request_id>: số nguyên thể hiện định dang của yêu cầu vận chuyển
Mỗi khối được kết thúc bởi ký tự #

Ví dụ

Input

Points 9
DISTANCES 81
1 1 0
1 2 600
1 3 600
1 4 600
1 5 600
1 6 600
1 7 600
1 8 600
1 9 600
2 1 600
2 2 0
2 3 600
2 4 600
2 5 600
2 6 600
2 7 600
2 8 600
2 9 600
3 1 600
3 2 600
3 3 0
3 4 600
3 5 600
3 6 600
3 7 600
3 8 600
3 9 600
4 1 600
4 2 600
4 3 600
4 4 0
4 5 600
4 6 600
4 7 600
4 8 600
4 9 600
5 1 600
5 2 600
5 3 600
5 4 600
5 5 0
5 6 600
5 7 600
5 8 600
5 9 600
6 1 600
6 2 600
6 3 600
6 4 600
6 5 600
6 6 0
6 7 600
6 8 600
6 9 600
7 1 600
7 2 600
7 3 600
7 4 600
7 5 600
7 6 600
7 7 0
7 8 600
7 9 600
8 1 600
8 2 600
8 3 600
8 4 600
8 5 600
8 6 600
8 7 600
8 8 0
8 9 600
9 1 600
9 2 600
9 3 600
9 4 600
9 5 600
9 6 600
9 7 600
9 8 600
9 9 0
TRAILER 3 300
TRUCK 3
1 4
2 4
3 4
REQ 1 20 1 PICKUP_CONTAINER 300 5 DROP_CONTAINER 600
REQ 2 40 5 PICKUP_CONTAINER_TRAILER 300 7 DROP_CONTAINER 600
REQ 3 40 8 PICKUP_CONTAINER 300 6 DROP_CONTAINER_TRAILER 600
REQ 4 20 7 PICKUP_CONTAINER_TRAILER 300 9 DROP_CONTAINER 600
REQ 5 40 6 PICKUP_CONTAINER 300 2 DROP_CONTAINER 600
#


Output

ROUTES 3

TRUCK 1

3 PICKUP_TRAILER

1 PICKUP_CONTAINER 1

5 DROP_CONTAINER 1

6 PICKUP_CONTAINER 5

2 DROP_CONTAINER 5

4 STOP

#

TRUCK 2

5 PICKUP_CONTAINER_TRAILER 2

7 DROP_CONTAINER 2

3 DROP_TRAILER

7 PICKUP_CONTAINER_TRAILER 4

9 DROP_CONTAINER 4

4 STOP

#

TRUCK 3

3 PICKUP_TRAILER

8 PICKUP_CONTAINER 3

6 DROP_CONTAINER_TRAILER 3

4 STOP

#